<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SecondPlayer&#39;s Blog</title>
  <subtitle>我读书多，你别骗我</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.secondplayer.top/"/>
  <updated>2017-11-21T15:55:40.953Z</updated>
  <id>http://www.secondplayer.top/</id>
  
  <author>
    <name>secondplayer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从SQLAlchemy的“缓存”问题说起</title>
    <link href="http://www.secondplayer.top/2017/11/21/sqlalchemy-cache/"/>
    <id>http://www.secondplayer.top/2017/11/21/sqlalchemy-cache/</id>
    <published>2017-11-21T15:37:21.000Z</published>
    <updated>2017-11-21T15:55:40.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>最近在排查一个问题，为了方便说明，我们假设现在有如下一个API：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.route("/sqlalchemy/test", methods=['GET'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqlalchemy_test_api</span><span class="params">()</span>:</span></div><div class="line">    data = &#123;&#125;</div><div class="line">    <span class="comment"># 获取商品价格</span></div><div class="line">    product = Product.query.get(<span class="number">1</span>)</div><div class="line">    data[<span class="string">'old_price'</span>] = product.present_price</div><div class="line">    <span class="comment"># 休眠10秒，等待外部修改价格</span></div><div class="line">    time.sleep(<span class="number">10</span>)</div><div class="line">    product = Product.query.get(<span class="number">1</span>)</div><div class="line">    data[<span class="string">'new_price'</span>] = product.present_price</div><div class="line">    <span class="keyword">return</span> jsonify(status=<span class="string">'ok'</span>, data=data)</div></pre></td></tr></table></figure>
<p>这里我们的后台使用了<a href="http://flask.pocoo.org/" target="_blank" rel="external">Flask</a>作为服务端框架，<a href="https://www.sqlalchemy.org/" target="_blank" rel="external">SQLAlchemy</a>作为数据库ORM框架。Product是一张商品表的ORM模型，假设原来id=1的商品价格为10，在程序休眠的10秒内价格被修改为20，那么你觉得返回的结果是多少？</p>
<p>old_price显然是10，那么new_price呢？讲道理的话由于外部修改价格为20了，同时程序在sleep后立刻又query了一次，你可能觉得new_price应该是20。但结果并不是，真实测试的结果是10，给人感觉就像是SQLAlchemy“缓存”了上一次的结果。</p>
<p>另外在测试的过程还发现一个现象，虽然在第一次API调用时两个price都是10，但是在第二次调用API时，读到的price是20。也就是说，在一个新的API开始时，之前“缓存”的结果被清除了。</p>
<h2 id="SQLAlchemy的session状态管理"><a href="#SQLAlchemy的session状态管理" class="headerlink" title="SQLAlchemy的session状态管理"></a>SQLAlchemy的session状态管理</h2><p>之前我们提出了一个猜测：第二次查询是否“缓存”了第一次查询。为了验证这个猜想，我们可以把<code>SQLALCHEMY_ECHO</code>这个配置项打开，这是个全局配置项，官方文档定义如下：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>SQLALCHEMY_ECHO</code></td>
<td style="text-align:left">If set to True SQLAlchemy will log all the statements issued to stderr which can be useful for debugging.</td>
</tr>
</tbody>
</table>
<p>在这个配置项打开的情况下，我们可以看到查询语句输出到终端下。我们再次调用API，可以发现第一次查询会输出类似<code>SELECT * FROM product WHERE id = 1</code>的语句，而第二次查询则没有这样的输出。如此看来，SQLAlchemy确实缓存了上次的结果，在第二次查询的时候直接使用了上次的结果。</p>
<p>实际上，当执行第一句<code>product = Product.query.get(1)</code>时，product这个对象处于持久状态(persistent)了，我们可以通过一些工具看到ORM对象目前处于的状态。详细的状态列表可在<a href="http://docs.sqlalchemy.org/en/latest/orm/session_state_management.html#quickie-intro-to-object-states" target="_blank" rel="external">官方文档</a>中找到。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> inspect</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>insp = inspect(product)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>insp.persistent</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>product.__dict__</div><div class="line">&#123;</div><div class="line">  <span class="string">'id'</span>: <span class="number">1</span>, <span class="string">'present_price'</span>: <span class="number">10</span>,</div><div class="line">  <span class="string">'_sa_instance_state'</span>: &lt;sqlalchemy.orm.state.InstanceState object at <span class="number">0x1106a3350</span>&gt;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了清除该对象的缓存，程度从低到高有下面几种做法。<code>expire</code>会清除对象里缓存的数据，这样下次查询时会直接从数据库进行查询。<code>refresh</code>不仅清除对象里缓存的数据，还会立刻触发一次数据库查询更新数据。<code>expire_all</code>的效果和<code>expire</code>一样，只不过会清除session里所有对象的缓存。<code>flush</code>会把所有本地修改写入到数据库，但没有提交。<code>commit</code>不仅把所有本地修改写入到数据库，同时也提交了该事务。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.session.expire(product)</div><div class="line">db.session.refresh(product)</div><div class="line">db.session.expire_all()</div><div class="line">db.session.flush()</div><div class="line">db.session.commit()</div></pre></td></tr></table></figure>
<p>我们对这几种方法依次做实验，结果发现这5个操作都会让下次查询直接从数据库进行查询，但只有<code>commit</code>会读到最新的price。那这个又是什么原因呢，我们已经强制每次查询走数据库，为何还是读到“缓存”的数据。这个就要用数据库的事务隔离机制来解释了。</p>
<h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><p>在数据库系统中，事务<a href="https://en.wikipedia.org/wiki/Isolation_(database_systems" target="_blank" rel="external">隔离级别</a>)(isolation level)决定了数据在系统中的可见性。隔离级别从低到高分为四种：未提交读(Read uncommitted)，已提交读(Read committed)，可重复读(Repeatable read)，可串行化(Serializable)。他们的区别如下表所示。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th style="text-align:right">脏读</th>
<th style="text-align:right">不可重复读</th>
<th style="text-align:right">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读(RU)</td>
<td style="text-align:right">可能</td>
<td style="text-align:right">可能</td>
<td style="text-align:right">可能</td>
</tr>
<tr>
<td>已提交读(RC)</td>
<td style="text-align:right">不可能</td>
<td style="text-align:right">可能</td>
<td style="text-align:right">可能</td>
</tr>
<tr>
<td>可重复读(RR)</td>
<td style="text-align:right">不可能</td>
<td style="text-align:right">不可能</td>
<td style="text-align:right">可能</td>
</tr>
<tr>
<td>可串行化</td>
<td style="text-align:right">不可能</td>
<td style="text-align:right">不可能</td>
<td style="text-align:right">不可能</td>
</tr>
</tbody>
</table>
<p>脏读(dirty read)是指一个事务可以读到其他事务还未提交的数据。不可重复读(non-repeatable read)是指在一个事务中同一行被读取了多次，可以读到不同的值。幻读(phantom read)是指在一个事务中执行同一个语句多次，读到的数据行发生了改变，即可能行数增加了或减少了。</p>
<p>前面提到的问题其实就涉及到不可重复读这个特性，即在一个事务中我们query了product.id=1的数据多次，但读到了重复的数据。对于MySQL来说，默认的事务隔离级别是RR，通过上表我们可知RR是可重复读的，因此可以解释这个现象。</p>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody>
<tr>
<td><figure class="highlight plain"><figcaption><span>| ```BEGIN;``` | </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">| ``` SELECT present_price FROM product WHERE id = 1;  /* id=1的商品价格为10 */ ```      | x | </div><div class="line">| x | ```UPDATE product SET present_price = 20 WHERE id = 1;  /* 修改id=1的商品价格为20 */ ``` |</div><div class="line">| x | ```COMMIT;``` |</div><div class="line">| ``` SELECT present_price FROM product WHERE id = 1;  /* 再次查询id=1的商品价格 */ ```      | x | </div><div class="line">| ``` COMMIT; ```      | z | </div><div class="line"></div><div class="line">对于前面的问题，我们可以把两个事务的执行时序图画出来如上所示。因此为了使第二次查询得到正确的值，我们可以把隔离级别设为RC，或者在第二次查询前进行`COMMIT`新起一个事务。</div><div class="line"></div><div class="line">## Flask-SQLAlchemy的自动提交</div><div class="line"></div><div class="line">前面还遗留一个问题没有搞清楚：在一个新的API开始时，之前“缓存”的结果似乎被清除了。由于打开了`SQLALCHEMY_ECHO`配置项，我们可以观察到每次API结束的时候都会自动触发一次`COMMIT`，而正是这个自动提交清空了所有的“缓存”。通过查找源代码，我们发现是下面这段代码在起作用：</div><div class="line"></div><div class="line">``` python</div><div class="line">@teardown</div><div class="line">def shutdown_session(response_or_exc):</div><div class="line">    if app.config[&apos;SQLALCHEMY_COMMIT_ON_TEARDOWN&apos;]:</div><div class="line">        if response_or_exc is None:</div><div class="line">            self.session.commit()</div><div class="line">    self.session.remove()</div><div class="line">    return response_or_exc</div></pre></td></tr></table></figure></td>
</tr>
</tbody>
</table>
<p>如果配置项<code>SQLALCHEMY_COMMIT_ON_TEARDOWN</code>为<code>True</code>，那么首先触发<code>COMMIT</code>，最后统一执行<code>session.remove()</code>操作，即释放连接并回滚事务操作。</p>
<p>有意思的是，这个配置项在Flask2.0版本的Changelog中被移除了。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-7b55f7db34ac4c33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Flask2.0 Changelog" title="">
                </div>
                <div class="image-caption">Flask2.0 Changelog</div>
            </figure>
<p>关于删除的原因，作者在<a href="https://stackoverflow.com/questions/23301968/invalid-transaction-persisting-across-requests" target="_blank" rel="external">stackoverflow</a>的一个帖子里进行了说明。这个帖子同时也解释了为什么在我们的生产环境中经常报这个错误：<br><code>InvalidRequestError: This session is in &#39;prepared&#39; state; no further SQL can be emitted within this transaction.</code>，而且只有重启才能解决问题。有兴趣的同学可以深入阅读一下。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在MySQL的同一个事务中，多次查询同一行的数据得到的结果是相同的，这里既有SQLAlchemy本身“缓存”结果的原因，也受到数据库隔离级别的影响。如果要强制读取最新的结果，最简单的办法就是在查询前手动<code>COMMIT</code>一次。根据这个原则，我们可以再仔细阅读下自己项目中的代码，看看会不会有一些隐藏的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;最近在排查一个问题，为了方便说明，我们假设现在有如下一个API：&lt;/p&gt;
&lt;figure class=&quot;highlight 
    
    </summary>
    
    
      <category term="Flask" scheme="http://www.secondplayer.top/tags/Flask/"/>
    
      <category term="SQLAlchemy" scheme="http://www.secondplayer.top/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>迁移博客到阿里云</title>
    <link href="http://www.secondplayer.top/2017/10/31/migrate-to-aliyun-ecs/"/>
    <id>http://www.secondplayer.top/2017/10/31/migrate-to-aliyun-ecs/</id>
    <published>2017-10-31T15:00:38.000Z</published>
    <updated>2017-10-31T15:00:38.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>去年在<a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>上搭建的博客已经过去一年多了，之前在<a href="http://secondplayer.top/2016/06/12/hexo-blog-setup/" target="_blank" rel="external">使用Hexo搭建个人静态博客</a>这篇文章中提到，使用AWS可以免费使用一年的VPS，然而一年到了后发现一个月要收费12.94美元，感觉实在性价比不高。听说<a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云</a>在2016年开始进军海外业务，所以趁这次机会迁移过去。于是在官网上购买了美国西部（硅谷）节点的服务器，目前在双11活动期间处于优惠价，有兴趣的朋友可以趁现在入手试一下。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-12ffd8f63fe7cc71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="购买阿里云ECS" title="">
                </div>
                <div class="image-caption">购买阿里云ECS</div>
            </figure>
<h2 id="ECS环境配置"><a href="#ECS环境配置" class="headerlink" title="ECS环境配置"></a>ECS环境配置</h2><p>购买完服务器后就开始配置环境了。首先是登录服务器，默认是密码方式登录。然而每次输入密码实在是太麻烦了，建议使用密钥方式登录，在ECS后台-网络和安全-密钥对里创建一个新的密钥对，然后将其与你的实例绑定，之后就可以用私钥登录了。注意密钥对创建完成后一定要马上下载私钥，因为阿里云只给你一次下载私钥的机会，并且不要将私钥泄露给别人。</p>
<p>登录到服务器之后开始安装环境，在此之前需要检查一下服务器是否能访问外网。如果无法访问外网，需要到ECS后台-网络和安全-安全组里新建安全组，给安全组配置默认规则，默认规则的出方向即为允许访问任意ip的任意端口。这个安全组后面还会用到，如果你想开放一个自定义端口允许外网访问，也需要新建一个安全组并配置相应规则。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-ace2a00f71c5347a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置安全组规则" title="">
                </div>
                <div class="image-caption">配置安全组规则</div>
            </figure>
<h2 id="迁移博客"><a href="#迁移博客" class="headerlink" title="迁移博客"></a>迁移博客</h2><p>一切准备就绪后开始迁移博客。由于hexo是静态博客，所以只需把相应的静态文件拷贝的新机器上即可。这里列一下遇到的坑以及一些升级改动。</p>
<h3 id="全局安装hexo报错"><a href="#全局安装hexo报错" class="headerlink" title="全局安装hexo报错"></a>全局安装hexo报错</h3><p>旧服务器上的node版本是v4.4.5，转眼一年过去了，最新版本是v8.4.0。在新版本下执行<code>npm install hexo-cli -g</code>安装hexo会有报错，解决办法详见<a href="https://github.com/hexojs/hexo/issues/2505" target="_blank" rel="external">官方issues</a>，简而言之就是先执行一句<code>npm config set unsafe-perm true</code>再安装即可。</p>
<h3 id="升级主题"><a href="#升级主题" class="headerlink" title="升级主题"></a>升级主题</h3><p>我的博客一直在使用这个Material Design风格的主题，名叫<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a>。在一年内这个主题也有了较大的更新，升级之后界面变得更简洁了，优化了分享功能，增加了赞赏功能。升级的话也很简单，直接将代码更新到最新，按照文档更新配置即可。</p>
<h3 id="评论系统切换"><a href="#评论系统切换" class="headerlink" title="评论系统切换"></a>评论系统切换</h3><p>旧博客使用的评论系统是多说，然而这家公司业务调整，已经关闭该系统了。知乎上有很多关于<a href="(https://www.zhihu.com/question/57426274/answer/153065672">替代方案的讨论</a>)，最终我选择了用<a href="https://github.com/imsun/gitment" target="_blank" rel="external">gitment</a>作为新博客的评论系统。这套评论系统最大的特点是基于GitHub Issues的评论系统，主要面向程序员群体。使用上也很方便，而且indigo主题已经支持gitment，所以只需简单配置几个参数就能使用了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个迁移步骤，主要在熟悉阿里云后台配置上花的时间最多。由于AWS是行业先行者，可以看得出阿里云的后台功能有点仿照AWS的意思，但可能是功能太多的缘故，给人感觉布局很拥挤。不管怎样，博客还是成功迁移了，在阿里云海外服务器上搭建科学上网工具也很流畅。</p>
<p>最后打个广告，如果有兴趣购买阿里云的相关产品可以使用这个<a href="https://promotion.aliyun.com/ntms/act/ambassador/sharetouser.html?userCode=cqbcj3wz&amp;utm_source=cqbcj3wz" target="_blank" rel="external">推广链接</a>，点击链接可以领取优惠券。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;去年在&lt;a href=&quot;https://aws.amazon.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AW
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.secondplayer.top/tags/Hexo/"/>
    
      <category term="阿里云" scheme="http://www.secondplayer.top/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>重构: 改善既有代码的设计</title>
    <link href="http://www.secondplayer.top/2017/09/19/refactoring-book/"/>
    <id>http://www.secondplayer.top/2017/09/19/refactoring-book/</id>
    <published>2017-09-18T16:12:24.000Z</published>
    <updated>2017-09-18T16:12:24.786Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/4262627/" target="_blank" rel="external">重构</a>这本书由著名的世界软件开发大师<a href="https://martinfowler.com/" target="_blank" rel="external">Martin Fowler</a>编写，是软件开发领域的经典书籍。书中的部分内容在<a href="https://refactoring.com/" target="_blank" rel="external">refactoring.com</a>上也有提及。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-2b484ff5d8bcc8e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重构: 改善既有代码的设计" title="">
                </div>
                <div class="image-caption">重构: 改善既有代码的设计</div>
            </figure>
<h2 id="什么是重构"><a href="#什么是重构" class="headerlink" title="什么是重构"></a>什么是重构</h2><p>视上下文不同，重构有两个定义：</p>
<ul>
<li>重构(名词)：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本</li>
<li>重构(动词)：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构</li>
</ul>
<h2 id="为什么要重构"><a href="#为什么要重构" class="headerlink" title="为什么要重构"></a>为什么要重构</h2><p>重构是个工具，它可以用于以下几个目的：</p>
<ul>
<li>重构改进软件设计</li>
<li>重构使软件更容易理解</li>
<li>重构帮助找到bug</li>
<li>重构提高编程速度</li>
</ul>
<h2 id="何时重构"><a href="#何时重构" class="headerlink" title="何时重构"></a>何时重构</h2><p>不需要专门拨出时间进行重构，重构应该随时随地进行。你之所以重构，是因为你想做别的什么事，而重构可以帮助你把那些事做好。</p>
<ul>
<li>事不过三，三则重构</li>
<li>添加功能时重构</li>
<li>修补错误时重构</li>
<li>复审代码时重构</li>
</ul>
<h2 id="何时不该重构"><a href="#何时不该重构" class="headerlink" title="何时不该重构"></a>何时不该重构</h2><ul>
<li>当既有代码实在太混乱，重构不如重写来得简单</li>
<li>当项目已接近最后期限，应该避免进行重构，因为已经没有时间了</li>
</ul>
<h2 id="代码的坏味道"><a href="#代码的坏味道" class="headerlink" title="代码的坏味道"></a>代码的坏味道</h2><p>「如果尿布臭了，就换掉它」。代码的坏味道指出了重构的可能性。</p>
<ul>
<li>重复代码 (Duplicated Code)</li>
<li>过长函数 (Long Method)</li>
<li>过大的类 (Large Class)</li>
<li>过长参数列 (Long Parameter List)</li>
<li>发散式变化 (Divergent Change)</li>
<li>switch语句 (Switch Statements)</li>
<li>中间人 (Middle Man)</li>
<li>异曲同工的类 (Alternative Classes with Different Interfaces)</li>
<li>过多的注释 (Comments)</li>
<li>…</li>
</ul>
<h2 id="构筑测试体系"><a href="#构筑测试体系" class="headerlink" title="构筑测试体系"></a>构筑测试体系</h2><p>重构的基本技巧「小步前进，频繁测试」已经得到了多年的实践检验。因此如果你想进行重构，首要前提就是拥有一个可靠的测试体系。</p>
<h2 id="常用重构方法"><a href="#常用重构方法" class="headerlink" title="常用重构方法"></a>常用重构方法</h2><h3 id="提炼函数-Extract-Method"><a href="#提炼函数-Extract-Method" class="headerlink" title="提炼函数 (Extract Method)"></a>提炼函数 (Extract Method)</h3><blockquote>
<p>当我看见一个过长的函数或者一段需要注释才能让人理解用途的代码，我就会将这段代码放进一个独立函数中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOwing</span><span class="params">()</span> </span>&#123;</div><div class="line">  printBanner();</div><div class="line"></div><div class="line">  <span class="comment">//print details</span></div><div class="line">  System.out.println (<span class="string">"name:  "</span> + _name);</div><div class="line">  System.out.println (<span class="string">"amount "</span> + amount);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOwing</span><span class="params">()</span> </span>&#123;</div><div class="line">  printBanner();</div><div class="line">  printDetails(amount);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDetails</span> <span class="params">(<span class="keyword">double</span> amount)</span> </span>&#123;</div><div class="line">  System.out.println (<span class="string">"name:  "</span> + _name);</div><div class="line">  System.out.println (<span class="string">"amount "</span> + amount);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="引入解释性变量-Introduce-Explaining-Variable"><a href="#引入解释性变量-Introduce-Explaining-Variable" class="headerlink" title="引入解释性变量 (Introduce Explaining Variable)"></a>引入解释性变量 (Introduce Explaining Variable)</h3><blockquote>
<p>表达式有可能非常复杂而难以阅读。这种情况下，临时变量可以帮助你将表达式分解为比较容易管理的形式。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((platform.toUpperCase().indexOf(<span class="string">"MAC"</span>) &gt; -<span class="number">1</span>) &amp;&amp;</div><div class="line">    (browser.toUpperCase().indexOf(<span class="string">"IE"</span>) &gt; -<span class="number">1</span>) &amp;&amp;</div><div class="line">    wasInitialized() &amp;&amp; resize &gt; <span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isMacOs = platform.toUpperCase().indexOf(<span class="string">"MAC"</span>) &gt; -<span class="number">1</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> isIEBrowser = browser.toUpperCase().indexOf(<span class="string">"IE"</span>) &gt; -<span class="number">1</span>;</div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> wasResized = resize &gt; <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (isMacOs &amp;&amp; isIEBrowser &amp;&amp; wasInitialized() &amp;&amp; wasResized) &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分解临时变量-Split-Temporary-Variable"><a href="#分解临时变量-Split-Temporary-Variable" class="headerlink" title="分解临时变量 (Split Temporary Variable)"></a>分解临时变量 (Split Temporary Variable)</h3><blockquote>
<p>如果临时变量承担多个责任，它就应该被替换(分解)为多个临时变量，每个变量只承担一个责任。同一个临时变量承担两件不同的事情，会令代码阅读者糊涂。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">double</span> temp = <span class="number">2</span> * (_height + _width);</div><div class="line">System.out.println (temp);</div><div class="line">temp = _height * _width;</div><div class="line">System.out.println (temp);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">double</span> perimeter = <span class="number">2</span> * (_height + _width);</div><div class="line">System.out.println (perimeter);</div><div class="line"><span class="keyword">final</span> <span class="keyword">double</span> area = _height * _width;</div><div class="line">System.out.println (area);</div></pre></td></tr></table></figure>
<h3 id="移除对参数的赋值-Remove-Assignments-to-Parameters"><a href="#移除对参数的赋值-Remove-Assignments-to-Parameters" class="headerlink" title="移除对参数的赋值 (Remove Assignments to Parameters)"></a>移除对参数的赋值 (Remove Assignments to Parameters)</h3><blockquote>
<p>我之所以不喜欢(对参数赋值)这样的做法，因为它降低了代码的清晰度，而且混淆了按值传递和按引用传递这两种参数传递方式。<br>当然，面对那些使用「输出式参数」(output parameters)的语言，你不必遵循这条规则。不过在那些语言中我会尽量少用输出式参数。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">discount</span> <span class="params">(<span class="keyword">int</span> inputVal, <span class="keyword">int</span> quantity, <span class="keyword">int</span> yearToDate)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (inputVal &gt; <span class="number">50</span>) &#123;</div><div class="line">        inputVal -= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">discount</span> <span class="params">(<span class="keyword">int</span> inputVal, <span class="keyword">int</span> quantity, <span class="keyword">int</span> yearToDate)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = inputVal;</div><div class="line">    <span class="keyword">if</span> (inputVal &gt; <span class="number">50</span>) &#123;</div><div class="line">        result -= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="提炼类-Extract-Class"><a href="#提炼类-Extract-Class" class="headerlink" title="提炼类 (Extract Class)"></a>提炼类 (Extract Class)</h3><blockquote>
<p>某个类做了应该由两个类做的事。<br>此时你需要考虑哪些部分可以分离出去，并将它们分离到一个单独的类中。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-5da7e72435862df7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提炼类" title="">
                </div>
                <div class="image-caption">提炼类</div>
            </figure>
<h3 id="移除中间人-Remove-Middle-Man"><a href="#移除中间人-Remove-Middle-Man" class="headerlink" title="移除中间人 (Remove Middle Man)"></a>移除中间人 (Remove Middle Man)</h3><blockquote>
<p>每当客户要使用受托类的新特性时，你就必须在服务端添加一个简单委托函数。随着受托类的特性(功能)越来越多，这一过程会让你痛苦不已。服务类完全变成了一个“中间人”，此时你就应该让客户直接调用受托类。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-614d9c5bb4893d61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="移除中间人" title="">
                </div>
                <div class="image-caption">移除中间人</div>
            </figure>
<h3 id="以字面常量取代魔法数-Replace-Magic-Number-with-Symbolic-Constant"><a href="#以字面常量取代魔法数-Replace-Magic-Number-with-Symbolic-Constant" class="headerlink" title="以字面常量取代魔法数 (Replace Magic Number with Symbolic Constant)"></a>以字面常量取代魔法数 (Replace Magic Number with Symbolic Constant)</h3><blockquote>
<p>所谓魔法数(magic number)是指拥有特殊意义，却又不能明确表现出这种意义的数字。如果你需要在不同的地点引用同一个逻辑数，魔法数会让你烦恼不已，因为一旦这些数发生改变，你就必须在程序中找到所有魔法数，并将它们全部修改一遍，这简直就是一场噩梦。就算你不需要修改，要准确指出每个魔法数的用途，也会让你颇费脑筋。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">potentialEnergy</span><span class="params">(<span class="keyword">double</span> mass, <span class="keyword">double</span> height)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> mass * <span class="number">9.81</span> * height;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">potentialEnergy</span><span class="params">(<span class="keyword">double</span> mass, <span class="keyword">double</span> height)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> mass * GRAVITATIONAL_CONSTANT * height;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> GRAVITATIONAL_CONSTANT = <span class="number">9.81</span>;</div></pre></td></tr></table></figure>
<h3 id="分解条件表达式-Decompose-Conditional"><a href="#分解条件表达式-Decompose-Conditional" class="headerlink" title="分解条件表达式 (Decompose Conditional)"></a>分解条件表达式 (Decompose Conditional)</h3><blockquote>
<p>程序之中，复杂的条件逻辑是最常导致复杂度上升的地点之一。你必须编写代码来检查不同的条件分支、根据不同的分支做不同的事，然后你很快就会得到一个相当长的函数。<br>对于条件逻辑，将每个分支条件分解成新函数可以给你带来更多好处：可以突出条件逻辑，更清楚地表明每个分支的作用，并且突出每个分支的原因。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (date.before (SUMMER_START) || date.after(SUMMER_END))</div><div class="line">  charge = quantity * _winterRate + _winterServiceCharge;</div><div class="line"><span class="keyword">else</span> charge = quantity * _summerRate;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (notSummer(date))</div><div class="line">  charge = winterCharge(quantity);</div><div class="line"><span class="keyword">else</span> charge = summerCharge (quantity);</div></pre></td></tr></table></figure>
<h3 id="合并条件表达式-Consolidate-Conditional-Expression"><a href="#合并条件表达式-Consolidate-Conditional-Expression" class="headerlink" title="合并条件表达式 (Consolidate Conditional Expression)"></a>合并条件表达式 (Consolidate Conditional Expression)</h3><blockquote>
<p>之所以要合并条件代码，有两个重要原因。首先，合并后的条件代码会告诉你“实际上只有一次条件检查，只不过有多个并列条件需要检查而已”，从而使这一次检查的用意更清晰。其次，这项重构往往可以为你使用提炼函数(Extract Method)做好准备。将检查条件提炼成一个独立函数对于厘清代码意义非常有用，因为它把描述“做什么”的语句换成了“为什么这样做”。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (_seniority &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> (_monthsDisabled &gt; <span class="number">12</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> (_isPartTime) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="comment">// compute the disability amount</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">disabilityAmount</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isNotEligableForDisability()) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="comment">// compute the disability amount</span></div></pre></td></tr></table></figure>
<h3 id="合并重复的条件片段-Consolidate-Duplicate-Conditional-Fragments"><a href="#合并重复的条件片段-Consolidate-Duplicate-Conditional-Fragments" class="headerlink" title="合并重复的条件片段 (Consolidate Duplicate Conditional Fragments)"></a>合并重复的条件片段 (Consolidate Duplicate Conditional Fragments)</h3><blockquote>
<p>有时你会发现，一组条件表达式的所有分支都执行了相同的某段代码。如果是这样，你就应该将这段代码搬移到条件表达式外面。这样，代码才能更清楚地表明哪些东西随条件的变化而变化、哪些东西保持不变。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (isSpecialDeal()) &#123;</div><div class="line">  total = price * <span class="number">0.95</span>;</div><div class="line">  send();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  total = price * <span class="number">0.98</span>;</div><div class="line">  send();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (isSpecialDeal())</div><div class="line">  total = price * <span class="number">0.95</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">  total = price * <span class="number">0.98</span>;</div><div class="line">send();</div></pre></td></tr></table></figure>
<h3 id="移除控制标记-Remove-Control-Flag"><a href="#移除控制标记-Remove-Control-Flag" class="headerlink" title="移除控制标记 (Remove Control Flag)"></a>移除控制标记 (Remove Control Flag)</h3><blockquote>
<p>人们之所以会使用这样的控制标记，因为结构化编程原则告诉他们：每个子程序只能有一个入口和一个出口。我赞同“单一入口”原则（而且现代编程语言也强迫我们这样做），但是“单一出口”原则会让你在代码中加入讨厌的控制标记，大大降低条件表达式的可读性。这就是编程语言提供break语句和continue语句的原因：用它们跳出复杂的条件语句。去掉控制标记所产生的效果往往让你大吃一惊：条件语句真正的用途会清晰得多。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkSecurity</span><span class="params">(String[] people)</span> </span>&#123;</div><div class="line">  <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; people.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (!found)&#123;</div><div class="line">      <span class="keyword">if</span> (people[i].equals(<span class="string">"Don"</span>)) &#123;</div><div class="line">        sendAlert();</div><div class="line">        found = <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (people[i].equals(<span class="string">"John"</span>)) &#123;</div><div class="line">        sendAlert();</div><div class="line">        found = <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> found;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkSecurity</span><span class="params">(String[] people)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; people.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (!found)&#123;</div><div class="line">      <span class="keyword">if</span> (people[i].equals(<span class="string">"Don"</span>)) &#123;</div><div class="line">        sendAlert();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (people[i].equals(<span class="string">"John"</span>)) &#123;</div><div class="line">        sendAlert();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="以卫语句取代嵌套条件表达式-Replace-Nested-Conditional-with-Guard-Clauses"><a href="#以卫语句取代嵌套条件表达式-Replace-Nested-Conditional-with-Guard-Clauses" class="headerlink" title="以卫语句取代嵌套条件表达式 (Replace Nested Conditional with Guard Clauses)"></a>以卫语句取代嵌套条件表达式 (Replace Nested Conditional with Guard Clauses)</h3><blockquote>
<p>如果条件表达式的两条分支都是正常行为，就应该使用形如if…else…的条件表达式；如果某个条件极其罕见，就应该单独检查该条件，并在该条件为真时立刻从函数中返回。这样的单独检查常常被称为“卫语句”(guard clauses)。</p>
<p>这个方法的精髓是：给某一条分支以特别的重视。它告诉阅读者：这种情况很罕见，如果它真地发生了，请做一些必要的整理工作，然后退出。</p>
<p>“每个函数只能有一个入口和一个出口”的观念，根深蒂固于某些程序员的脑海里。现今的编程语言都会强制保证每个函数只有一个入口，至于“单一出口”规则，其实不是那么有用。保持代码清晰才是最关键的：如果单一出口能使这个函数更清晰易读，那么就使用单一出口；否则就不必这么做。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPayAmount</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">double</span> result;</div><div class="line">  <span class="keyword">if</span> (_isDead) result = deadAmount();</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">if</span> (_isSeparated) result = separatedAmount();</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (_isRetired) result = retiredAmount();</div><div class="line">      <span class="keyword">else</span> result = normalPayAmount();</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">getPayAmount</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (_isDead) <span class="keyword">return</span> deadAmount();</div><div class="line">  <span class="keyword">if</span> (_isSeparated) <span class="keyword">return</span> separatedAmount();</div><div class="line">  <span class="keyword">if</span> (_isRetired) <span class="keyword">return</span> retiredAmount();</div><div class="line">  <span class="keyword">return</span> normalPayAmount();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>扩展阅读：关于如何重构嵌套条件表达式，可以阅读<a href="https://coolshell.cn/articles/17757.html" target="_blank" rel="external">如何重构“箭头型”代码</a>，这篇文章更深层次地讨论了这个问题。</p>
<h3 id="将查询函数和修改函数分离-Separate-Query-from-Modifier"><a href="#将查询函数和修改函数分离-Separate-Query-from-Modifier" class="headerlink" title="将查询函数和修改函数分离 (Separate Query from Modifier)"></a>将查询函数和修改函数分离 (Separate Query from Modifier)</h3><blockquote>
<p>下面是一条好规则：任何有返回值的函数，都不应该有看得到的副作用。</p>
<p>如果你遇到一个“既有返回值又有副作用”的函数，就应该试着将查询动作从修改动作中分割出来。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-7f9ff8bd03c36865.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将查询函数和修改函数分离" title="">
                </div>
                <div class="image-caption">将查询函数和修改函数分离</div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4262627/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;重构&lt;/a&gt;这本书由著名的世界软件开发大师&lt;a href=&quot;https://martinfowler.com/
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://www.secondplayer.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="重构" scheme="http://www.secondplayer.top/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>常见推荐系统介绍</title>
    <link href="http://www.secondplayer.top/2017/09/08/recommendation-system-book/"/>
    <id>http://www.secondplayer.top/2017/09/08/recommendation-system-book/</id>
    <published>2017-09-07T16:07:37.000Z</published>
    <updated>2017-09-07T16:09:51.518Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是对项亮的<a href="https://book.douban.com/subject/10769749/" target="_blank" rel="external">推荐系统实践</a>部分章节进行了一些总结，先从什么是推荐系统开始讲起，然后介绍了评测推荐系统的指标和方法，最后介绍了常见的推荐系统算法。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-7457fe3c0981d437.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="《推荐系统实践》封面" title="">
                </div>
                <div class="image-caption">《推荐系统实践》封面</div>
            </figure>
<h2 id="什么是推荐系统"><a href="#什么是推荐系统" class="headerlink" title="什么是推荐系统"></a>什么是推荐系统</h2><p>随着信息技术和互联网的快速发展，人们逐渐从信息匮乏的时代走入了信息过载的时代。每天都有海量的信息被生产出来，用户如何从中找到自己感兴趣的内容变得越来越困难，内容生产者也在想方设法让自己生成的内容从海量信息中脱颖而出。为了解决信息过载的问题，历史上出现过的代表方案有分类目录和搜索引擎，这两者都要求用户明确知道自己需要的内容关键词。而推荐系统不需要用户提供明确的需求，而是通过分析用户的历史行为给用户的兴趣建模，从而主动给用户推荐能够满足它们兴趣的内容。推荐系统通过发掘用户的行为，找到用户的个性化需求，从而将<a href="https://zh.wikipedia.org/wiki/%E9%95%BF%E5%B0%BE" target="_blank" rel="external">长尾</a>商品准确地推荐给需要它的用户，帮助用户发现那些他们感兴趣但很难发现的商品。</p>
<h2 id="推荐系统的应用"><a href="#推荐系统的应用" class="headerlink" title="推荐系统的应用"></a>推荐系统的应用</h2><p>在互联网的各类网站中都可以看到推荐系统的应用，尽管不同网站使用的技术不同，但总的来说几乎所有的推荐系统应用都是由前台的展示页面、后台的日志系统以及推荐算法系统构成。</p>
<ul>
<li>电子商务：<a href="https://www.taobao.com/" target="_blank" rel="external">淘宝</a>、<a href="https://www.jd.com/" target="_blank" rel="external">京东</a>、<a href="https://www.amazon.com/" target="_blank" rel="external">亚马逊</a></li>
<li>电影/视频：<a href="https://www.netflix.com/" target="_blank" rel="external">Netflix</a>、<a href="https://www.youtube.com/" target="_blank" rel="external">YouTube</a>、<a href="http://www.iqiyi.com/" target="_blank" rel="external">爱奇艺</a></li>
<li>音乐：<a href="http://www.pandora.com/" target="_blank" rel="external">Pandora</a>、<a href="http://music.163.com/" target="_blank" rel="external">网易云音乐</a>、<a href="https://douban.fm/" target="_blank" rel="external">豆瓣FM</a></li>
<li>社交网络：<a href="https://www.facebook.com/" target="_blank" rel="external">Facebook</a>、<a href="https://twitter.com/" target="_blank" rel="external">Twitter</a>、<a href="http://www.linkedin.com/" target="_blank" rel="external">LinkedIn</a>、<a href="http://weibo.com/" target="_blank" rel="external">新浪微博</a></li>
<li>个性化阅读：<a href="http://digg.com/" target="_blank" rel="external">Digg</a>、<a href="https://flipboard.com/" target="_blank" rel="external">Flipboard</a>、<a href="http://www.toutiao.com/" target="_blank" rel="external">今日头条</a></li>
<li>基于位置的服务：<a href="https://foursquare.com/" target="_blank" rel="external">Foursquare</a></li>
<li>个性化广告：<a href="https://developers.facebook.com/docs/audience-network/" target="_blank" rel="external">Facebook Audience Network</a></li>
</ul>
<h2 id="推荐系统实验方法"><a href="#推荐系统实验方法" class="headerlink" title="推荐系统实验方法"></a>推荐系统实验方法</h2><p>在推荐系统中，主要有三种评测推荐效果的实验方法：离线实验、用户调查、在线实验。</p>
<h2 id="推荐系统评测指标"><a href="#推荐系统评测指标" class="headerlink" title="推荐系统评测指标"></a>推荐系统评测指标</h2><ul>
<li>用户满意度：用户的主观感受，主要通过用户调查的方式获得，也可以间接从用户行为统计中得到。</li>
<li>预测准确度：度量一个推荐系统或推荐算法预测用户行为的能力。评分预测的预测准确度一般通过计算测试集和训练集的均方根误差(RMSE)和平均绝对误差(MAE)得到。TopN推荐的预测准确度一般通过计算测试集和训练集的准确率(precison)和召回率(recall)得到。</li>
</ul>
<blockquote>
<p>令r<sub>ui</sub>是用户u对物品i的实际评分，r<sup>^</sup><sub>ui</sub>是推荐算法给出的预测评分，T是测试集，那么：<br>RMSE = sqrt(Σ<sub>u,i∈T</sub>(r<sub>ui</sub>-r<sup>^</sup><sub>ui</sub>)<sup>2</sup> / |T|)<br>MAE = Σ<sub>u,i∈T</sub>|r<sub>ui</sub>-r<sup>^</sup><sub>ui</sub>| / |T|</p>
<p>令R(u)是用户u在训练集上的推荐结果，T(u)是用户u在测试集上的行为结果，U是用户集合，那么：<br> Precision = Σ<sub>u∈U</sub>|R(u) ∩ T(u)| / Σ<sub>u∈U</sub>|R(u)|<br> Recall = Σ<sub>u∈U</sub>|R(u) ∩ T(u)| / Σ<sub>u∈U</sub>|T(u)|</p>
</blockquote>
<ul>
<li>覆盖率：描述一个推荐系统对物品长尾的发掘能力。</li>
</ul>
<blockquote>
<p>假设用户集合为U，物品集合为I，推荐系统给每个用户推荐一个长度为N的物品列表R(u)，那么：<br>Coverage = |∪<sub>u∈U</sub>R(u)| / |I|</p>
</blockquote>
<ul>
<li>多样性：为了满足用户广泛的兴趣，推荐列表需要能够覆盖用户不同的兴趣领域。</li>
<li>新颖性：是指给用户推荐那些他们以前没听说过的商品。</li>
<li>惊喜度(serendipity)：如果推荐结果和用户的历史兴趣不相似，但却让用户觉得满意，那么就可以说推荐结果的惊喜度很高。</li>
<li>信任度：提高信任度的方法是给出合理的推荐解释。</li>
<li>实时性：推荐系统需要实时地更新推荐列表来满足用户新的行为变化，并且需要能够将新加入系统的物品推荐给用户。</li>
<li>健壮性(robust)：衡量一个推荐系统抗击作弊的能力。</li>
</ul>
<p>在众多指标中，作者认为：对于可以离线优化的指标，应该在给定覆盖率、多样性、新颖性等限制条件下，尽量优化预测准确度。</p>
<h2 id="常见推荐系统算法"><a href="#常见推荐系统算法" class="headerlink" title="常见推荐系统算法"></a>常见推荐系统算法</h2><p>推荐系统是联系用户和物品的媒介，而推荐联系用户和物品的方式主要有3种，如下图所示。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/2245716-b37cbd23e2424475.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3种联系用户和物品的推荐系统" title="">
                </div>
                <div class="image-caption">3种联系用户和物品的推荐系统</div>
            </figure>
<p>第一种方法，首先找到用户喜欢的物品，然后找到与这些物品相似的物品推荐给用户。基于这种方法可以给出如下的推荐解释：购买了该商品的用户也经常购买这些商品。这种方法通常被称为基于物品的协同过滤算法(item-based collaborative filtering)。<br>第二种方法，首先找到和用户有相似兴趣的其他用户，然后推荐这些其他用户喜欢的物品。这种方法通常被称为基于用户的协同过滤算法(user-based collaborative filtering)。<br>第三种方法，首先找到用户感兴趣的物品特征，然后推荐包含这些特征的物品。这种方法核心思想是通过隐含特征联系用户兴趣和物品，通常被称为隐语义模型算法(latent factor model)。</p>
<h2 id="协同过滤算法"><a href="#协同过滤算法" class="headerlink" title="协同过滤算法"></a>协同过滤算法</h2><p>个性化推荐系统的一个重要算法是基于用户行为分析，学术界一般将这种类型的算法称为协同过滤算法(collaborative filtering)。</p>
<blockquote>
<p>顾名思义，协同过滤就是指用户可以齐心协力，通过不断地和网站互动，使自己的推荐列表能够不断过滤掉自己不感兴趣的物品，从而越来越满足自己的需求。</p>
</blockquote>
<h2 id="基于物品的协同过滤算法"><a href="#基于物品的协同过滤算法" class="headerlink" title="基于物品的协同过滤算法"></a>基于物品的协同过滤算法</h2><p>基于物品的协同过滤算法(以下简称ItemCF)，是目前业界应用最多的算法，最早由电子商务公司亚马逊提出。ItemCF算法给用户推荐那些和他们之前喜欢的物品相似的物品，它的主要步骤分为两步。</p>
<blockquote>
<p>(1) 计算物品之间的相似度<br>   (2) 根据物品的相似度和用户的历史行为给用户生成推荐列表</p>
</blockquote>
<p>第一步计算相似度可用余弦相似度公式</p>
<blockquote>
<p>令N(i)是喜欢物品i的用户集合，那么物品i和物品j的相似度可定义为：<br>   w<sub>ij</sub> = |N(i) ∩ N(j)| / sqrt(|N(i)||N(j)|)</p>
</blockquote>
<p>第二步计算用户对物品的兴趣，如下公式的含义是：和用户历史上感兴趣的物品越相似的物品，越有可能在用户的推荐列表中获得比较高的排名。</p>
<blockquote>
<p>令p<sub>uj</sub>为用户u对物品j的兴趣，w<sub>ji</sub>是物品j和物品i的相似度，r<sub>ui</sub>是用户u对物品i的兴趣（对于隐反馈数据集，如果用户u对物品i有过行为，可简单令r<sub>ui</sub>=1），S(j,K)是和物品j最相似的K个物品的集合，那么：<br>   p<sub>uj</sub> = Σ<sub>i∈N(u)∩S(j,K)</sub> w<sub>ji</sub>r<sub>ui</sub></p>
</blockquote>
<p>最后选取该用户兴趣值最高的N的物品作为推荐列表。</p>
<h2 id="基于用户的协同过滤算法"><a href="#基于用户的协同过滤算法" class="headerlink" title="基于用户的协同过滤算法"></a>基于用户的协同过滤算法</h2><p>基于用户的协同过滤算法(以下简称UserCF)，是推荐系统中最古老的算法。UserCF算法先找到和他有相似兴趣的其他用户，然后把那些用户喜欢的、而他没有听说过的物品推荐给他，它的主要步骤分为两步。</p>
<blockquote>
<p>(1) 找到和目标用户兴趣相似的用户集合<br>   (2) 找到这个集合中的用户喜欢的，且目标用户没有听说过的物品推荐给目标用户</p>
</blockquote>
<p>第一步计算用户的兴趣相似度可用余弦相似度公式</p>
<blockquote>
<p>令N(u)是用户u曾经有过正反馈的物品集合，那么用户u和用户v的相似度可定义为：<br>   w<sub>uv</sub> = |N(u) ∩ N(v)| / sqrt(|N(u)||N(v)|)</p>
</blockquote>
<p>第二步计算用户对物品的兴趣</p>
<blockquote>
<p>令p<sub>ui</sub>为用户u对物品i的兴趣，w<sub>uv</sub>是用户u和用户v的相似度，r<sub>vi</sub>是用户v对物品i的兴趣（对于隐反馈数据集，如果用户v对物品i有过行为，可简单令r<sub>vi</sub>=1），S(u,K)是和用户u兴趣最相似的K个用户的集合，那么：<br>   p<sub>ui</sub> = Σ<sub>v∈N(i)∩S(u,K)</sub> w<sub>uv</sub>r<sub>vi</sub></p>
</blockquote>
<p>最后选取该用户兴趣值最高的N的物品作为推荐列表。</p>
<h2 id="隐语义模型"><a href="#隐语义模型" class="headerlink" title="隐语义模型"></a>隐语义模型</h2><p>隐语义模型算法(以下简称LFM)，是最近几年推荐系统领域最为热门的研究话题。LFM算法的核心思想是通过隐含特征联系用户兴趣和物品，它的主要步骤分为三步。</p>
<blockquote>
<p>(1) 对物品进行分类<br>   (2) 确定用户对哪些类的物品感兴趣以及感兴趣的程度<br>   (3) 对于给定的类，确定物品在这个类的权重，并且选择性地推荐给用户</p>
</blockquote>
<p>关于如何给物品分类，一个简单方案是由编辑来手动分类，但这样存在很强的主观性和较大的工作量。为了解决这个困难，研究人员提出可以从用户数据出发，基于隐含语义分析技术(latent variable analysis)自动找到哪些类，然后进行个性化推荐。隐含语义分析技术有很多著名的模型和方法，比如pLSA、LDA、隐含类别模型、隐含主题模型、矩阵分解等。</p>
<blockquote>
<p>LFM通过如下公式计算用户u对物品i的兴趣：<br>   Preference<sub>ui</sub> =  Σ<sub>k∈[1,K]</sub> p<sub>u,k</sub>q<sub>i,k</sub><br>   其中p<sub>u,k</sub>度量了用户u的兴趣和第k个隐类的关系，而q<sub>i,k</sub>度量了第k个隐类和物品i的关系。这两个参数的计算需要一点最优化理论或者机器学习的知识，这里不多作介绍。</p>
</blockquote>
<h2 id="三种算法的优缺点比较"><a href="#三种算法的优缺点比较" class="headerlink" title="三种算法的优缺点比较"></a>三种算法的优缺点比较</h2><ul>
<li>LFM是一种基于机器学习的算法，有较好的理论基础。ItemCF/UserCF是基于邻域的方法，更多的是一种基于统计的方法，没有学习过程。</li>
<li>假设有M个用户和N个物品，选取F个隐类。UserCF需要存储用户的相似度矩阵，存储空间是O(M*M)。ItemCF需要存储物品的相似度矩阵，存储空间是O(N*N)。LFM需要的存储空间是O(F*(M+N))。如果用户数很多，UserCF将会占据很大的内存。如果物品数很多，ItemCF将会占据很大的内存。LFM存储空间最少，这在M和N很大时可以很好地节省离线计算的内存。</li>
<li>假设有M个用户和N个物品和K条用户对物品的行为记录。那么，UserCF计算用户表的时间复杂度是O(N*(K/N)<sup>2</sup>)，而ItemCF计算物品表的时间复杂度是O(M*(K/M)<sup>2</sup>)。而对于LFM，如果用F个隐类，迭代S次，那么它的时间复杂度是O(K*F*S)。在一般情况下，LFM的时间复杂度要稍微高于UserCF和ItemCF，主要是因为该算法需要多次迭代。</li>
<li>ItemCF算法支持很好的推荐解释，它可以利用用户的历史行为解释推荐结果，但LFM无法提供这样的解释。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在互联网应用中可以看到大量推荐系统的应用，它主要解决了信息过载的问题，通过算法主动帮助用户找到自己感兴趣的内容。常见的推荐系统算法有三种，分别代表三种联系用户和物品的方式，它们是：基于物品的协同过滤算法(ItemCF)，基于用户的协同过滤算法(ItemCF)，隐语义模型算法(LFM)。三种方法各有优劣，需要根据实际场景选择合适的算法，通过不断优化指标找到最优算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是对项亮的&lt;a href=&quot;https://book.douban.com/subject/10769749/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;推荐系统实践&lt;/a&gt;部分章节进行了一些总结，先从什么是推荐系统开始讲起，然后介绍了评测推荐
    
    </summary>
    
    
      <category term="推荐系统" scheme="http://www.secondplayer.top/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="读书笔记" scheme="http://www.secondplayer.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用redis的有序集合实现排行榜功能</title>
    <link href="http://www.secondplayer.top/2017/07/23/redis-sorted-set/"/>
    <id>http://www.secondplayer.top/2017/07/23/redis-sorted-set/</id>
    <published>2017-07-23T05:43:36.000Z</published>
    <updated>2017-09-04T15:34:43.987Z</updated>
    
    <content type="html"><![CDATA[<p>排行榜是业务开发中常见的一个场景，如何设计一个好的数据结构能够满足高效实时的查询，下面我们结合一个实际例子来讨论一下。</p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>选手报名参加活动，观众可以对选手进行投票，每个观众对同一名选手只能投一票，活动期间最多投四票。后台需要提供如下接口：</p>
<ul>
<li>接口1：返回TOP 10的选手信息及投票数</li>
<li>接口2：返回活动总参与选手数及总投票数</li>
<li>接口3：对于每个选手，返回自己的投票数，排名，距离上一名差的票数</li>
</ul>
<h2 id="基于数据库的方案"><a href="#基于数据库的方案" class="headerlink" title="基于数据库的方案"></a>基于数据库的方案</h2><p>首先需要一张表存储投票记录，一次投票就是一条记录。这张表相当于投票明细，判断每人只投一张票以及最多投四张表都依赖对这张表的查询。<br>如果直接对这张表做TOP 10的查询，则需要根据选手id做聚合查询，这样每次查询必然耗时。为了优化查询，可以增加另一张排行榜表，用一个定时任务每隔一段时间对原表做聚合查询，然后将结果写进排行榜表里，表里包含投票数及排名的字段，这样查询TOP 10和排名的时候直接查这张表。引入另一张表加快了性能，但牺牲了实时性，活动说明里需加上类似“榜单数据每10分钟同步一次”的话来告知用户。</p>
<h2 id="基于redis的方案"><a href="#基于redis的方案" class="headerlink" title="基于redis的方案"></a>基于redis的方案</h2><p>对于排行榜的需求，redis有一个数据结构非常适合做这件事，那就是有序集合(sorted set)。</p>
<h3 id="redis的有序集合相关命令"><a href="#redis的有序集合相关命令" class="headerlink" title="redis的有序集合相关命令"></a>redis的有序集合相关命令</h3><p>有序集合和集合一样可以存储字符串，另外有序集合的成员可以关联一个分数(score)，这个分数用于集合排序。下面以投票为例说明常见的命令，vote_activity是有序集合的key。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#给Alice投票</div><div class="line">redis&gt; zincrby vote_activity 1 Alice</div><div class="line">&quot;1&quot; </div><div class="line">#给Bob投票</div><div class="line">redis&gt; zincrby vote_activity 1 Bob</div><div class="line">&quot;1&quot;</div><div class="line">#给Alice投票</div><div class="line">redis&gt; zincrby vote_activity 1 Alice</div><div class="line">&quot;2&quot;</div><div class="line">#查看Alice投票数</div><div class="line">redis&gt; zscore vote_activity Alice</div><div class="line">&quot;2&quot;</div><div class="line">#获取Alice排名(从高到低，zero-based)</div><div class="line">redis&gt; zrevrank vote_activity Alice</div><div class="line">(integer) 0</div><div class="line">#获取前10名(从高到低)</div><div class="line">redis&gt; zrevrange vote_activity 0 9</div><div class="line">1) &quot;Alice&quot;</div><div class="line">2) &quot;Bob&quot;</div><div class="line">#获取前10名及对应的分数(从高到低)</div><div class="line">redis&gt; zrevrange vote_activity 0 9 withscores</div><div class="line">1) &quot;Alice&quot;</div><div class="line">2) &quot;2&quot;</div><div class="line">3) &quot;Bob&quot;</div><div class="line">4) &quot;1&quot;</div><div class="line">#获取总参与选手数</div><div class="line">redis&gt; zcard vote_activity</div><div class="line">(integer) 2</div></pre></td></tr></table></figure></p>
<h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><p>回到最开始的场景，大部分需求都已经得到满足，还剩下两个数据需要单独说一下。接口2中的总投票数没有直接的接口获得，一种方法是先用<a href="https://redis.io/commands/zrange" target="_blank" rel="external">ZRANGE</a>遍历所有的key，然后对score进行求和，另一种方法是对总票数单独用一个数据结构存储。接口3的距离上一名差的票数，先用<a href="https://redis.io/commands/zrevrank" target="_blank" rel="external">ZREVRANK</a>获取自己排名，然后用<a href="https://redis.io/commands/zrevrange" target="_blank" rel="external">ZREVRANGE</a>获取上一排名的分数，最后用自己的分数减去上一名的分数即可，代码示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_next_step</span><span class="params">(redis_key, member)</span>:</span></div><div class="line">    next_step = <span class="keyword">None</span></div><div class="line">    score = redis.zscore(redis_key, member)</div><div class="line">    rank = redis.zrevrank(redis_key, member)</div><div class="line">    <span class="keyword">if</span> rank &gt; <span class="number">0</span>:</div><div class="line">        next_member = redis.zrevrange(redis_key, rank - <span class="number">1</span>, rank - <span class="number">1</span>, withscores=<span class="keyword">True</span>)</div><div class="line">        next_step = next_member[<span class="number">0</span>][<span class="number">1</span>] - score</div><div class="line">    <span class="keyword">return</span> next_step</div></pre></td></tr></table></figure></p>
<p>另外如果两个key的score相同，排序逻辑是按照key的字母序排序。在有些情况下这个可能不满足实际要求，因此需要按实际情况重新设计key。比如如果要求同分数情况下按时间排序，那么key最好加上时间戳前缀。</p>
<h3 id="redis与数据库的同步"><a href="#redis与数据库的同步" class="headerlink" title="redis与数据库的同步"></a>redis与数据库的同步</h3><p>redis通常是作为缓存层加速查询的，如果数据没有做持久化则有概率会丢失数据。一个方案是用定时任务定时同步redis与数据库的数据，数据库里存储着原始数据，通过计算数据库的数据和redis做对比，可以修正由于redis不稳定导致的数据不一致。这里需要注意的是在同步过程时redis的数据有可能还在增长，因此最好先读redis的数据，然后记下时间，查询指定时间段里的数据库的数据，最后再用<a href="https://redis.io/commands/zincrby" target="_blank" rel="external">ZINCRBY</a>增量修正redis数据，而不是直接用<a href="https://redis.io/commands/zadd" target="_blank" rel="external">ZADD</a>覆盖redis数据。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>redis的有序集合是一个非常高效的数据结构，可以替代数据库里一些很难实现的操作。它的一个典型应用场景就是排行榜，通过ZRANK可以快速得到用户的排名，通过ZRANGE可以快速得到TOP N的用户列表，它们的复杂度都是O(log(N))，用来替代数据库查询可以大大提升性能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排行榜是业务开发中常见的一个场景，如何设计一个好的数据结构能够满足高效实时的查询，下面我们结合一个实际例子来讨论一下。&lt;/p&gt;
&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;选手报
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.secondplayer.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用redis实现分布式锁</title>
    <link href="http://www.secondplayer.top/2017/07/16/redis-distribution-lock/"/>
    <id>http://www.secondplayer.top/2017/07/16/redis-distribution-lock/</id>
    <published>2017-07-16T05:40:10.000Z</published>
    <updated>2017-09-04T15:34:29.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在类似秒杀这样的并发场景下，为了确保同一时刻只能允许一个用户访问资源，需要利用加锁的机制控制资源的访问权。如果服务只在单台机器上运行，可以简单地用一个内存变量进行控制。而在多台机器的系统上，则需要用分布式锁的机制进行并发控制。基于redis的一些特性，利用redis可以既方便又高效地模拟锁的实现。</p>
<h2 id="一个简单方案"><a href="#一个简单方案" class="headerlink" title="一个简单方案"></a>一个简单方案</h2><p>让我们先从一个简单的实现说起，这里用到了redis的两个命令，<a href="https://redis.io/commands/setnx" target="_blank" rel="external">SETNX</a>和<a href="https://redis.io/commands/expire" target="_blank" rel="external">EXPIRE</a>。如果lock_key不存在，那么就设置lock_key的值为1，并且设置过期时间；如果lock_key存在，说明已经有人在使用这把锁，访问失败。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire_lock</span><span class="params">(lock_key, expire_timeout=<span class="number">60</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> redis.setnx(lock_key, <span class="number">1</span>):</div><div class="line">        redis.expire(lock_key, expire_timeout)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>逻辑上看似乎没有问题，但是考虑一下异常情况：如果setnx设置成功，但expire由于某些原因（比如超时）操作失败，那么这把锁就永远存在了，也就是所谓的死锁，后面的人永远无法访问这个资源。</p>
<h2 id="利用时间戳取值的方案"><a href="#利用时间戳取值的方案" class="headerlink" title="利用时间戳取值的方案"></a>利用时间戳取值的方案</h2><p>为了解决死锁，我们可以利用setnx的value来做文章。上例中的我们设的value是1，其实并没有派上用场。因此可以考虑将value设为当前时间加上expire_timeout，当setnx设置失败后，我们去读lock_key的value，并且和当前时间作比对，如果当前时间大于value，那么资源理当被释放。代码示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire_lock</span><span class="params">(lock_key, expire_timeout=<span class="number">60</span>)</span>:</span></div><div class="line">    expire_time = int(time.time()) + expire_timeout</div><div class="line">    <span class="keyword">if</span> redis.setnx(lock_key, expire_time):</div><div class="line">        redis.expire(lock_key, expire_timeout)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    redis_value = redis.get(lock_key)</div><div class="line">    <span class="keyword">if</span> redis_value <span class="keyword">and</span> int(time.time()) &gt; int(redis_value):</div><div class="line">        redis.delete(lock_key)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>然而仔细推敲下这段代码仍然能发现一些问题。第一，这个方案依赖时间，如果在分布式系统中的时间没有同步，则会对方案产生一定偏差。第二，假设C1和C2都没拿到锁，它们都去读value并对比时间，在竞态条件(race condition)下可能产生如下的时序：C1删除lock_key，C1获得锁，C2删除lock_key，C2获得锁。这样C1和C2同时拿到了锁，显然是不对的。</p>
<h2 id="改进后的方案"><a href="#改进后的方案" class="headerlink" title="改进后的方案"></a>改进后的方案</h2><p>幸运的是，redis里还有一个指令可以帮助我们解决这个问题。<a href="https://redis.io/commands/getset" target="_blank" rel="external">GETSET</a>指令在set新值的同时会返回老的值，这样的话我们可以检查返回的值，如果该值和之前读出来的值相同，那么这次操作有效，反之则无效。代码示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire_lock</span><span class="params">(lock_key, expire_timeout=<span class="number">60</span>)</span>:</span></div><div class="line">    expire_time = int(time.time()) + expire_timeout</div><div class="line">    <span class="keyword">if</span> redis.setnx(lock_key, expire_time):</div><div class="line">        redis.expire(lock_key, expire_timeout)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    redis_value = redis.get(lock_key)</div><div class="line">    <span class="keyword">if</span> redis_value <span class="keyword">and</span> int(time.time()) &gt; int(redis_value):</div><div class="line">        expire_time = int(time.time()) + expire_timeout</div><div class="line">        old_value = redis.getset(lock_key, expire_time)</div><div class="line">        <span class="keyword">if</span> int(old_value) == int(redis_value):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>这个方案基本可以满足要求，除了有一个小瑕疵，由于getset会去修改value，在竞态条件下可能会被修改多次导致timeout有细微的误差，但这个对结果影响不大。</p>
<h2 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h2><p>以上方案实现起来略显繁琐，但从redis 2.6.12版本开始有一个更为简便的方法。我们可以使用<a href="https://redis.io/commands/set" target="_blank" rel="external">SET</a>指令的扩展 <strong> SET key value [EX seconds] [PX milliseconds] [NX|XX] </strong>，这个指令相当于对SETNX和EXPIRES进行了合并，因而我们的算法可以简化为如下一行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">acquire_lock</span><span class="params">(lock_key, expire_timeout=<span class="number">60</span>)</span>:</span></div><div class="line">    ret = redis.set(lock_key, int(time.time()), nx=<span class="keyword">True</span>, ex=expire_timeout):</div><div class="line">    <span class="keyword">return</span> ret</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在redis 2.6.12版本之后我们可以用一个简单的SET命令实现分布式锁，而在此版本之前则需要将SETNX和GETSET配合使用一个较为繁琐的方案。简化后的方案对于开发者来说当然是好事，但通过学习这一演变过程我们会对问题有更深刻的印象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在类似秒杀这样的并发场景下，为了确保同一时刻只能允许一个用户访问资源，需要利用加锁的机制控制资源的访问权。如果服务只在单台机器上运行，可以简
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.secondplayer.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建个人静态博客</title>
    <link href="http://www.secondplayer.top/2016/06/12/hexo-blog-setup/"/>
    <id>http://www.secondplayer.top/2016/06/12/hexo-blog-setup/</id>
    <published>2016-06-12T06:42:23.000Z</published>
    <updated>2017-09-04T15:34:09.500Z</updated>
    
    <content type="html"><![CDATA[<p>最近有时间折腾了一下建一个个人博客，在对比了几家之后，最终决定用<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>作为框架，<a href="https://github.com/" target="_blank" rel="external">GitHub</a>作为部署平台搭建博客。VPS选用的是<a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>，新用户可以免费使用1年的EC2，足够用来体验了。</p>
<h2 id="申请VPS"><a href="#申请VPS" class="headerlink" title="申请VPS"></a>申请VPS</h2><p>VPS指的是虚拟服务器，国内推荐用<a href="https://www.aliyun.com/" target="_blank" rel="external">阿里云</a>，国外推荐用<a href="https://www.linode.com/" target="_blank" rel="external">Linode</a>, <a href="https://www.digitalocean.com/" target="_blank" rel="external">Digital Ocean</a>, <a href="https://aws.amazon.com/" target="_blank" rel="external">AWS</a>。我选择的是AWS，主要有几个原因，一是因为新用户可以试用免费1年，二是因为公司用的就是AWS，对其各项操作比较熟悉，最后一个原因是选择一个国外服务器可以自己搭建ShadowSocks<a href="https://segmentfault.com/a/1190000003101075" target="_blank" rel="external">科学上网</a>。</p>
<h2 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h2><p>域名申请服务商，国内有<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">万网</a>，<a href="http://www.cndns.com/" target="_blank" rel="external">美橙</a>，国外有<a href="https://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>, <a href="https://www.namecheap.com/" target="_blank" rel="external">NameCheap</a>。我选择的是NameCheap，主要因为价格因素。你要问国内的那些更便宜为啥不选？呵呵国内的情况你懂的。</p>
<h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>DNS解析推荐<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPOD</a>，业界良心，服务免费且强大。域名绑定前记得先到NameCheap控制台设置DNS解析到DNSPOD提供的两个免费DNS解析服务器，具体参考<a href="https://support.dnspod.cn/Kb/showarticle/?qtype=%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B&amp;tsid=47" target="_blank" rel="external">这里</a>。</p>
<h2 id="Hexo安装及配置"><a href="#Hexo安装及配置" class="headerlink" title="Hexo安装及配置"></a>Hexo安装及配置</h2><p>前面把主机和域名搞定了，现在开始在主机上搭建博客了。提到博客，一般都会选用经典的<a href="https://www.wordpress.com/" target="_blank" rel="external">WordPress</a>搭建。不过现在越来越多的个人博客都采用静态博客框架，典型的如<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>， <a href="https://jekyllrb.com/" target="_blank" rel="external">Jekyll</a>， <a href="https://github.com/octopress/octopress" target="_blank" rel="external">Octopress</a>。从流行度和技术栈的角度来看，我倾向于选择Hexo。<br><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>是一个用Node.js搭建的博客框架，简单强大易上手。静态文件用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>编写，Hexo会根据静态文件自动生成网页。</p>
<h3 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h3><ul>
<li>安装<a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure>
<ul>
<li>安装<a href="https://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
</ul>
<p>通常用<a href="https://www.npmjs.com/package/nvm" target="_blank" rel="external">nvm</a>(Node.js Version Manager)安装Node环境<br>安装必要环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install build-essential libssl-dev</div></pre></td></tr></table></figure></p>
<p>下载nvm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</div></pre></td></tr></table></figure></p>
<p>查看可用版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm ls-remote</div></pre></td></tr></table></figure></p>
<p>选取最新版本，这里我们安装v4.4.5，并将其设为默认<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nvm install 4.4.5</div><div class="line">$ nvm <span class="built_in">alias</span> default 4.4.5</div><div class="line">$ nvm use default</div></pre></td></tr></table></figure></p>
<ul>
<li>安装<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a></li>
</ul>
<p>我们通过npm分别安装hexo客户端和服务端</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div><div class="line">$ npm install -g hexo-server</div></pre></td></tr></table></figure>
<h3 id="生成文章"><a href="#生成文章" class="headerlink" title="生成文章"></a>生成文章</h3><ul>
<li>初始化hexo环境</li>
</ul>
<p>我们把hexo_blog作为博客目录名，首先初始化hexo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init ~/hexo_blog</div><div class="line">$ <span class="built_in">cd</span> ~/hexo_blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<ul>
<li>修改配置文件_config.yml</li>
</ul>
<p>配置Site, URL, Directory, Writing等基本信息，详细参考这篇<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">配置文档</a><br>这里建议设置default_layout为draft，这样默认生成文章在Draft里，确认后再发布到Public。</p>
<h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><ul>
<li>新建文章，以名称first_post为例</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new first-post</div></pre></td></tr></table></figure>
<ul>
<li>编辑文章，文章都存放在source目录下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim ~/hexo_blog/<span class="built_in">source</span>/_drafts/first-post.md</div></pre></td></tr></table></figure>
<ul>
<li>发布文章，这将会把文章从draft移到post目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish first-post</div></pre></td></tr></table></figure>
<h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><ul>
<li>启动服务器，默认起在4000端口，成功后访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 预览效果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>我们需要选择一个静态文件的托管平台，首选<a href="https://github.com/" target="_blank" rel="external">GitHub</a>，国内可以考虑<a href="https://coding.net/" target="_blank" rel="external">Coding</a>（最近收购了<a href="http://gitcafe.com/" target="_blank" rel="external">GitCafe</a>）。</p>
<ul>
<li>创建GitHub Repository</li>
</ul>
<p>参考这个<a href="https://help.github.com/articles/creating-a-new-repository/" target="_blank" rel="external">步骤</a>，创建一个名为hexo_static的repo，注意设置为Public</p>
<ul>
<li>修改配置文件_config.yml，注意替换<em>$username</em></li>
</ul>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span> </div><div class="line"><span class="attr">  type:</span> <span class="string">git</span> </div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/$username/hexo_static.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<ul>
<li>安装hexo git插件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<ul>
<li>部署</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>按照提示输入用户名和密码，一切步骤完成后，所有文件都已生成并提交到Git上了</p>
<h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>整个自动化的思路是：运行该脚本，生成博客静态文件，通过hexo deploy实现自动提交到Git，然后通过本地更新代码，对关联的空分支进行git push操作，触发post-receive钩子，从而将静态文件同步到/var/www/hexo目录，而该目录正是Nginx将80端口转发到本地的路径。</p>
<ul>
<li>初始化空仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init --bare ~/hexo_bare</div></pre></td></tr></table></figure>
<ul>
<li>创建git hooks</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim ~/hexo_bare/hooks/post-receive</div></pre></td></tr></table></figure>
<p>这里我们用到了post-receive这个钩子，当一个本地仓库执行git push后会触发。post-receive具体内容为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">git --work-tree=/var/www/hexo --git-dir=/home/<span class="variable">$USER</span>/hexo_bare checkout -f</div></pre></td></tr></table></figure>
<ul>
<li>将空仓库关联到主仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/<span class="variable">$username</span>/hexo_static.git ~/hexo_static </div><div class="line">$ <span class="built_in">cd</span> ~/hexo_static</div><div class="line">$ git remote add live ~/hexo_bare</div></pre></td></tr></table></figure>
<ul>
<li>创建自动化脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim ~/hexo_blog/hexo_git_deploy.sh</div></pre></td></tr></table></figure>
<p>脚本内容为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">hexo clean</div><div class="line">hexo generate </div><div class="line">hexo deploy</div><div class="line"></div><div class="line">( <span class="built_in">cd</span> ~/hexo_static ; git pull ; git push live master)</div></pre></td></tr></table></figure>
<ul>
<li>Nginx配置</li>
</ul>
<p>创建/var/www/hexo目录，稍后会将Nginx的请求映射到该目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo mkdir -p /var/www/hexo</div><div class="line">$ sudo chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/hexo</div><div class="line">$ sudo chmod -R 755 /var/www/hexo</div></pre></td></tr></table></figure>
<p>编辑/etc/nginx/sites-available/default<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/nginx/sites-available/default</div></pre></td></tr></table></figure></p>
<p>配置Nginx将80端口的请求映射到/var/www/hexo目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server &#123; </div><div class="line">    listen 80 default_server; </div><div class="line">    listen [::]:80 default_server ipv6only=on; </div><div class="line">    root /var/www/hexo; </div><div class="line">    index index.html index.htm;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>重启Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service nginx restart</div></pre></td></tr></table></figure>
<h3 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h3><p>至此，我们可以总结下今后发布文章或更新博客的流程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ hexo new my-post</div><div class="line">$ vim ~/hexo_blog/<span class="built_in">source</span>/_draft/my-post.md</div><div class="line">$ hexo publish my-post</div><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>接着运行hexo server，然后在<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 上预览效果，如果不满意则继续修改my-post.md（此时在_post目录下），重新生成文件（hexo generate），再预览直到可以发布为止</p>
<p>而最终对外发布，我们只需要敲下一行命令就完成了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ~/hexo_blog/hexo_git_deploy.sh</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>主题</li>
</ul>
<p>默认hexo的主题是<a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="external">landscape</a>，如果你想与众不同的话，可以用下别的主题或者自定义主题。官方收录的请点击<a href="https://hexo.io/themes/" target="_blank" rel="external">这里</a>，我选择的是<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="external">indigo</a>，主要看中的是他的Material Design风格</p>
<ul>
<li>评论</li>
</ul>
<p>常见的评论系统有<a href="https://disqus.com/" target="_blank" rel="external">Disqus</a>，<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>，<a href="http://www.uyan.cc/" target="_blank" rel="external">友言</a>等，我选择的是多说。接入非常简单，去网站上注册个账号，然后将示例代码插到网页中即可</p>
<ul>
<li>统计</li>
</ul>
<p>流量统计选择<a href="http://tongji.cnzz.com/" target="_blank" rel="external">cnzz</a>(现已被整合进<a href="https://www.umeng.com/" target="_blank" rel="external">Umeng+</a>)</p>
<ul>
<li>监控</li>
</ul>
<p>可以接入<a href="http://www.jiankongbao.com/" target="_blank" rel="external">监控宝</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo Documentation</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-blog-with-hexo-on-ubuntu-14-04" target="_blank" rel="external">How to Create a Blog with Hexo On Ubuntu 14.04</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有时间折腾了一下建一个个人博客，在对比了几家之后，最终决定用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;作为框架，&lt;a href=&quot;https://github.com/&quot; targ
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.secondplayer.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.secondplayer.top/2016/06/11/hello-world/"/>
    <id>http://www.secondplayer.top/2016/06/11/hello-world/</id>
    <published>2016-06-10T16:00:00.000Z</published>
    <updated>2017-09-04T15:37:50.579Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
